services:
  load-balancer:
    image: nginx:stable-alpine
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 localhost:443"
      start_period: 5s
      interval: 10s
      timeout: 5s
    depends_on:
      api-1:
        condition: service_healthy
      api-2:
        condition: service_healthy
      api-3:
        condition: service_healthy
      spa-renderer:
        condition: service_healthy
      front-end-1:
        condition: service_healthy
      front-end-2:
        condition: service_healthy
      front-end-3:
        condition: service_healthy
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - "./nginx/ssl:/etc/ssl"
      - "./nginx/default.conf:/etc/nginx/conf.d/default.conf"
      - "./docker-compose/scripts:/opt/scripts"

  api-1: &api-app
    image: ghcr.io/ruchira088/video-downloader-api:dev
    healthcheck:
      test: "curl -f http://localhost:8000/service/info"
      start_period: 10s
      interval: 10s
      timeout: 5s
    depends_on:
      postgres:
        condition: service_healthy
      migration-application:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      spa-renderer:
        condition: service_healthy
    volumes:
      - "./videos:/opt/videos"
      - "./images:/opt/images"
      - "./api/src/main/resources/logback.xml:/opt/data/logback.xml"
    environment:
      DATABASE_URL: "jdbc:postgresql://postgres:5432/video-downloader"
      DATABASE_USER: "admin"
      DATABASE_PASSWORD: "password"
      REDIS_HOSTNAME: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "redis-password"
      KAFKA_BROKERS: "kafka-broker:29092"
      SCHEMA_REGISTRY: "http://schema-registry:8081"
      SPA_SITE_RENDERER: "http://spa-renderer:8000"
      VIDEO_FOLDER: "/opt/videos"
      IMAGE_FOLDER: "/opt/images"

  api-2:
    *api-app

  api-3:
    *api-app

  batch-1: &batch-app
    image: ghcr.io/ruchira088/video-downloader-batch:dev
    depends_on:
      postgres:
        condition: service_healthy
      migration-application:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      spa-renderer:
        condition: service_healthy
    volumes:
      - "./videos:/opt/videos"
      - "./images:/opt/images"
      - "./batch/src/main/resources/logback.xml:/opt/data/logback.xml"
    environment:
      DATABASE_URL: "jdbc:postgresql://postgres:5432/video-downloader"
      DATABASE_USER: "admin"
      DATABASE_PASSWORD: "password"
      REDIS_HOSTNAME: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "redis-password"
      KAFKA_BROKERS: "kafka-broker:29092"
      SCHEMA_REGISTRY: "http://schema-registry:8081"
      SPA_SITE_RENDERER: "http://spa-renderer:8000"
      VIDEO_FOLDER: "/opt/videos"
      IMAGE_FOLDER: "/opt/images"

  batch-2:
    *batch-app

  batch-3:
    *batch-app

  spa-renderer:
    image: ghcr.io/ruchira088/video-downloader-spa-renderer:dev
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 127.0.0.1:8000"
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  migration-application:
    image: ghcr.io/ruchira088/video-downloader-migration-application:dev
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: "jdbc:postgresql://postgres:5432/video-downloader"
      DATABASE_USER: "admin"
      DATABASE_PASSWORD: "password"
      # The password is "top-secret"
      HASHED_ADMIN_PASSWORD: "$$2a$$10$$m5CQAirrrJKRqG3oalNSU.TUOn56v88isxMbNPi8cXXI35gY20hO."

  postgres:
    image: postgres:15.2
#    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: "pg_isready -U admin -d video-downloader"
      start_period: 10s
      interval: 10s
      timeout: 5s
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: "video-downloader"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "password"

  redis:
    image: bitnami/redis:7.0
    healthcheck:
      test: "redis-cli ping"
      start_period: 1s
      interval: 2s
      timeout: 1s
    environment:
      REDIS_PASSWORD: "redis-password"
    ports:
      - "6379:6379"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka-broker:
    image: confluentinc/cp-kafka:7.9.2
    ports:
      - "9092:9092"
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 kafka-broker:29092"
      start_period: 20s
      interval: 5s
      timeout: 2s
      retries: 10
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.2
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 schema-registry:8081"
      start_period: 5s
      interval: 5s
      timeout: 2s
    depends_on:
      kafka-broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-broker:29092"
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  kpow:
    image: factorhouse/kpow-ce:94.2
    ports:
      - "3000:3000"
    depends_on:
      schema-registry:
        condition: service_healthy
    env_file:
      - .kpow.env
    environment:
      BOOTSTRAP: kafka-broker:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081

  front-end-1: &front-end
    image: ghcr.io/ruchira088/video-downloader-front-end:dev
    healthcheck:
      test: "curl -f http://localhost"
      start_period: 5s
      interval: 3s
      timeout: 2s

  front-end-2: *front-end

  front-end-3: *front-end